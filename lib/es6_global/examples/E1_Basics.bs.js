// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as $$Array from "../../../node_modules/bs-platform/lib/es6/array.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_array from "../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ReActor$Reactor from "../src/ReActor.bs.js";
import * as FFI_Runtime$Reactor from "../src/FFI_Runtime.bs.js";
import * as ReActor_Utils$Reactor from "../src/ReActor_Utils.bs.js";
import * as ReActor_Process$Reactor from "../src/ReActor_Process.bs.js";

function noop(env, state) {
  if (state[/* counter */0] === 2112) {
    var p = ReActor_Process$Reactor.Pid[/* toString */1](Curry._1(env[/* self */1], /* () */0));
    console.log("" + (String(p) + " got to 2112"));
  }
  return Curry._1(env[/* loop */0], /* record */[/* counter */state[/* counter */0] + 1 | 0]);
}

function loop_noop(env, state) {
  Curry._2(env[/* sleep */2], 100, (function () {
          var now = ReActor_Utils$Reactor.$$Date[/* now */0](/* () */0);
          var counter = state[/* counter */0];
          var pid = ReActor_Process$Reactor.Pid[/* toString */1](Curry._1(env[/* self */1], /* () */0));
          console.log("" + (String(now) + (" - " + (String(pid) + (" - " + (String(counter) + ""))))));
          return Curry._1(env[/* loop */0], /* record */[/* counter */state[/* counter */0] - 1 | 0]);
        }));
  return state;
}

var named_slower_pid = ReActor$Reactor.register("slower_pid", ReActor$Reactor.spawn(loop_noop, /* record */[/* counter */0]));

var anon_slower_pid = ReActor$Reactor.spawn(loop_noop, /* record */[/* counter */0]);

var pids = $$Array.to_list($$Array.map((function (i) {
            return ReActor$Reactor.spawn(noop, /* record */[/* counter */i]);
          }), Caml_array.caml_make_vect(10000, 0)));

FFI_Runtime$Reactor.defer((function () {
        var p = ReActor_Process$Reactor.Pid[/* toString */1](anon_slower_pid);
        console.log("Anon Killing " + (String(p) + " by pid"));
        return ReActor$Reactor.exit(anon_slower_pid);
      }), 1500);

FFI_Runtime$Reactor.defer((function () {
        var match = ReActor$Reactor.where_is("slower_pid");
        if (match !== undefined) {
          var pid = match;
          var p = ReActor_Process$Reactor.Pid[/* toString */1](pid);
          console.log("Killing " + (String(p) + " by name \"slower_pid\""));
          return ReActor$Reactor.exit(pid);
        } else {
          console.log("Could not find pid \"slower_pid\"");
          return /* () */0;
        }
      }), 3000);

export {
  noop ,
  loop_noop ,
  named_slower_pid ,
  anon_slower_pid ,
  pids ,
  
}
/* named_slower_pid Not a pure module */
