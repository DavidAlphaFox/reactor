// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as Block from "../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as ReActor from "../src/ReActor.bs.js";
import * as ReactDOMRe from "../../../node_modules/reason-react/lib/es6_global/src/ReactDOMRe.js";
import * as ReasonReact from "../../../node_modules/reason-react/lib/es6_global/src/ReasonReact.js";
import * as Js_primitive from "../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as ReActor_Utils from "../src/ReActor_Utils.bs.js";
import * as Caml_exceptions from "../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";

var __name = "logger";

var Log = Caml_exceptions.create("E6_ProcessesWithReact.ReactLogger.Log");

var component = ReasonReact.statelessComponent("Log");

function makeComponent(text, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.createDomElement("div", {
                          name: "logger"
                        }, /* array */[text]);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

function logger_f(env, state) {
  var match = Curry._1(env[/* recv */1], /* () */0);
  if (match !== undefined) {
    var m = Js_primitive.valFromOption(match);
    if (m[0] === Log) {
      var eta = makeComponent(m[1], /* array */[]);
      var el = ReasonReact.element(undefined, undefined, eta);
      ReactDOMRe.renderToElementWithId(el, state[/* elementId */0]);
      return /* Become */Block.__(0, [state]);
    } else {
      return /* Become */Block.__(0, [state]);
    }
  } else {
    return /* Become */Block.__(0, [state]);
  }
}

var dom_logger = ReActor.register(__name, ReActor.spawn(logger_f, /* record */[/* elementId */"sample"]));

function logInt(s) {
  return [
          Log,
          String(s) + "ms"
        ];
}

var ReactLogger = /* module */[
  /* __name */__name,
  /* Log */Log,
  /* component */component,
  /* makeComponent */makeComponent,
  /* logger_f */logger_f,
  /* dom_logger */dom_logger,
  /* logInt */logInt
];

var Diff = Caml_exceptions.create("E6_ProcessesWithReact.Differ.Diff");

function f(env, config) {
  var match = Curry._1(env[/* recv */1], /* () */0);
  if (match !== undefined) {
    var m = Js_primitive.valFromOption(match);
    if (m[0] === Diff) {
      var delta = ReActor_Utils.Performance[/* now */0](/* () */0) - m[1] | 0;
      ReActor.send(config[/* send_to */0], Curry._1(config[/* wrap */1], delta));
      return /* Become */Block.__(0, [config]);
    } else {
      return /* Become */Block.__(0, [config]);
    }
  } else {
    return /* Become */Block.__(0, [config]);
  }
}

function start(param) {
  return ReActor.spawn(f, param);
}

var Differ = /* module */[
  /* Diff */Diff,
  /* f */f,
  /* start */start
];

function clock_f(_, config) {
  ReActor.send(config[/* send_to */1], Curry._1(config[/* wrap */2], ReActor_Utils.Performance[/* now */0](/* () */0)));
  return /* Suspend */Block.__(2, [
            config[/* delay */0],
            config
          ]);
}

function start$1(param) {
  return ReActor.spawn(clock_f, param);
}

var Clock = /* module */[
  /* clock_f */clock_f,
  /* start */start$1
];

var match = ReActor.whereIs("logger");

if (match !== undefined) {
  var differ = ReActor.spawn(f, /* record */[
        /* send_to */match,
        /* wrap */logInt
      ]);
  ReActor.spawn(clock_f, /* record */[
        /* delay */100,
        /* send_to */differ,
        /* wrap */(function (x) {
            return [
                    Diff,
                    x
                  ];
          })
      ]);
} else {
  console.log("Failed to start logger.");
}

export {
  ReactLogger ,
  Differ ,
  Clock ,
  
}
/* component Not a pure module */
