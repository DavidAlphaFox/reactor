// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_exceptions from "../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";
import * as ReActor$Reactor from "../src/ReActor.bs.js";
import * as ReActor_Utils$Reactor from "../src/ReActor_Utils.bs.js";
import * as ReActor_Process$Reactor from "../src/ReActor_Process.bs.js";

var __name = "logger";

var Log = Caml_exceptions.create("TestModule_7-Reactor.DOMLogger.Log");

function logger_f(env, state) {
  Curry._1(env[/* recv */3], (function (param) {
          if (param[0] === Log) {
            ReActor_Utils$Reactor.DOM[/* withInnerText */1](state[/* node */0], param[1]);
            return Curry._1(env[/* loop */0], state);
          } else {
            return Curry._1(env[/* loop */0], state);
          }
        }));
  return state;
}

var dom_logger = ReActor$Reactor.register(__name, ReActor$Reactor.spawn(logger_f, /* record */[/* node */ReActor_Utils$Reactor.DOM[/* getElementById */0]("sample")]));

function logInt(s) {
  return [
          Log,
          String(s) + ("ms - " + ReActor_Utils$Reactor.Random[/* shortId */3](/* () */0))
        ];
}

var DOMLogger = /* module */[
  /* __name */__name,
  /* Log */Log,
  /* logger_f */logger_f,
  /* dom_logger */dom_logger,
  /* logInt */logInt
];

var Diff = Caml_exceptions.create("TestModule_7-Reactor.Differ.Diff");

function f(env, config) {
  Curry._1(env[/* recv */3], (function (param) {
          if (param[0] === Diff) {
            var t = param[1];
            var delta = ReActor_Utils$Reactor.Performance[/* now */0](/* () */0) - t[/* current_time */1] | 0;
            var pid = ReActor_Process$Reactor.Pid[/* toString */1](t[/* pid */0]);
            var self = ReActor_Process$Reactor.Pid[/* toString */1](Curry._1(env[/* self */1], /* () */0));
            console.log("Received message from: " + (String(pid) + (" while running on " + (String(self) + ""))));
            ReActor$Reactor.send(config[/* send_to */0], Curry._1(config[/* wrap */1], delta));
            return Curry._1(env[/* loop */0], config);
          } else {
            return Curry._1(env[/* loop */0], config);
          }
        }));
  return config;
}

function start(param) {
  return ReActor$Reactor.spawn(f, param);
}

var Differ = /* module */[
  /* Diff */Diff,
  /* f */f,
  /* start */start
];

function clock_f(env, config) {
  Curry._2(env[/* sleep */2], config[/* delay */0], (function () {
          ReActor$Reactor.send(config[/* send_to */1], Curry._2(config[/* wrap */2], Curry._1(env[/* self */1], /* () */0), ReActor_Utils$Reactor.Performance[/* now */0](/* () */0)));
          return Curry._1(env[/* loop */0], config);
        }));
  return config;
}

function start$1(param) {
  return ReActor$Reactor.spawn(clock_f, param);
}

var Clock = /* module */[
  /* clock_f */clock_f,
  /* start */start$1
];

ReActor$Reactor.trace(/* record */[
      /* matcher */(function (_, message) {
          return message[0] === Diff;
        }),
      /* handler */(function (param) {
          if (param[0] === Diff) {
            console.log("Differ got message => " + (String(param[1]) + ""));
            return /* () */0;
          } else {
            return /* () */0;
          }
        }),
      /* timeout */50
    ]);

var match = ReActor$Reactor.where_is("logger");

if (match !== undefined) {
  var differ = ReActor$Reactor.spawn(f, /* record */[
        /* send_to */match,
        /* wrap */logInt
      ]);
  ReActor$Reactor.spawn(clock_f, /* record */[
        /* delay */0,
        /* send_to */differ,
        /* wrap */(function (pid, x) {
            return [
                    Diff,
                    /* record */[
                      /* pid */pid,
                      /* current_time */x,
                      /* random_id */ReActor_Utils$Reactor.Random[/* shortId */3](/* () */0)
                    ]
                  ];
          })
      ]);
} else {
  console.log("Failed to start logger.");
}

export {
  DOMLogger ,
  Differ ,
  Clock ,
  
}
/* dom_logger Not a pure module */
