// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Block from "../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Option from "./Option.bs.js";
import * as ReActor from "../../src/ReActor.bs.js";
import * as Caml_obj from "../../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as Game_FFI from "./Game_FFI.bs.js";
import * as Caml_exceptions from "../../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";
import * as Caml_builtin_exceptions from "../../../../node_modules/bs-platform/lib/es6/caml_builtin_exceptions.js";

var name = "input_handler";

var Event = Caml_exceptions.create("EventHandler.Event");

var Subscribe = Caml_exceptions.create("EventHandler.Subscribe");

var Unsubscribe = Caml_exceptions.create("EventHandler.Unsubscribe");

function fanout(subs, $$event) {
  Game_FFI.Event[/* preventDefault */0]($$event);
  var kind = Game_FFI.Event[/* kind */4]($$event);
  var exit = 0;
  var pids;
  try {
    pids = Curry._2(Game_FFI.Event[/* Map */3][/* find */21], kind, subs);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return List.iter((function (pid) {
                  return ReActor.send(pid, [
                              Event,
                              Game_FFI.Event[/* data */5]($$event)
                            ]);
                }), pids);
  }
  
}

function subscribe(event_name, pid, subs) {
  var pids;
  try {
    pids = Curry._2(Game_FFI.Event[/* Map */3][/* find */21], event_name, subs);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      pids = /* [] */0;
    } else {
      throw exn;
    }
  }
  var pids$prime = /* :: */[
    pid,
    pids
  ];
  return Curry._3(Game_FFI.Event[/* Map */3][/* add */3], event_name, pids$prime, Curry._2(Game_FFI.Event[/* Map */3][/* remove */5], event_name, subs));
}

function unsubscribe(event_name, pid, subs) {
  var pids;
  try {
    pids = Curry._2(Game_FFI.Event[/* Map */3][/* find */21], event_name, subs);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      pids = /* [] */0;
    } else {
      throw exn;
    }
  }
  var pids$prime = List.filter((function (p) {
            return Caml_obj.caml_equal(p, pid);
          }))(pids);
  return Curry._3(Game_FFI.Event[/* Map */3][/* add */3], event_name, pids$prime, Curry._2(Game_FFI.Event[/* Map */3][/* remove */5], event_name, subs));
}

function setupHandlers(event_name, node, handlers, subs) {
  var handler$prime = function (param) {
    return fanout(subs, param);
  };
  var handlers$prime;
  var exit = 0;
  var handler;
  try {
    handler = Curry._2(Game_FFI.Event[/* Map */3][/* find */21], event_name, handlers);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      handlers$prime = handlers;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    Game_FFI.DOM[/* off */5](event_name, handler, node);
    handlers$prime = Curry._2(Game_FFI.Event[/* Map */3][/* remove */5], event_name, handlers);
  }
  Game_FFI.DOM[/* on */4](event_name, handler$prime, node);
  return Curry._3(Game_FFI.Event[/* Map */3][/* add */3], event_name, handler$prime, handlers$prime);
}

function $$continue(event_name, param, subscribers$prime) {
  var node = param[/* node */0];
  var handlers$prime = setupHandlers(event_name, node, param[/* handlers */1], subscribers$prime);
  return /* Become */Block.__(0, [/* record */[
              /* node */node,
              /* handlers */handlers$prime,
              /* subscribers */subscribers$prime
            ]]);
}

function handleMessage(state, param) {
  if (param[0] === Subscribe) {
    var event_name = param[1];
    return $$continue(event_name, state, subscribe(event_name, param[2], state[/* subscribers */2]));
  } else if (param[0] === Unsubscribe) {
    var event_name$1 = param[1];
    return $$continue(event_name$1, state, unsubscribe(event_name$1, param[2], state[/* subscribers */2]));
  } else {
    return /* Become */Block.__(0, [state]);
  }
}

function loop(env, state) {
  return Option.$less$pipe$great(Option.$great$great$pipe(Curry._1(env[/* recv */1], /* () */0), (function (param) {
                    return handleMessage(state, param);
                  })), /* Become */Block.__(0, [state]));
}

function start() {
  var initialState_000 = /* node */Game_FFI.DOM[/* window */1];
  var initialState_001 = /* handlers */Game_FFI.Event[/* Map */3][/* empty */0];
  var initialState_002 = /* subscribers */Game_FFI.Event[/* Map */3][/* empty */0];
  var initialState = /* record */[
    initialState_000,
    initialState_001,
    initialState_002
  ];
  return ReActor.register(name, ReActor.spawn(loop, initialState));
}

export {
  name ,
  Event ,
  Subscribe ,
  Unsubscribe ,
  fanout ,
  subscribe ,
  unsubscribe ,
  setupHandlers ,
  $$continue ,
  handleMessage ,
  loop ,
  start ,
  
}
/* ReActor Not a pure module */
