// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as Block from "../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Option from "./Option.bs.js";
import * as ReActor from "../../src/ReActor.bs.js";
import * as Game_Renderer from "./Game_Renderer.bs.js";
import * as Caml_exceptions from "../../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";

var debugInfo = "debug_info";

var Status = Caml_exceptions.create("Game_DebugInfo.Status");

function handleMessage(state, param) {
  if (param[0] === Status) {
    var data = param[1];
    if (typeof data === "number") {
      return state;
    } else {
      switch (data.tag | 0) {
        case 0 : 
            return /* record */[
                    /* shouldUpdate */true,
                    /* lastKeyName */data[0],
                    /* lastKeyCode */data[1],
                    /* lastMouseClick */state[/* lastMouseClick */3],
                    /* lastMouseMove */state[/* lastMouseMove */4],
                    /* lastScreenSize */state[/* lastScreenSize */5]
                  ];
        case 1 : 
            return /* record */[
                    /* shouldUpdate */true,
                    /* lastKeyName */state[/* lastKeyName */1],
                    /* lastKeyCode */state[/* lastKeyCode */2],
                    /* lastMouseClick *//* tuple */[
                      data[0],
                      data[1]
                    ],
                    /* lastMouseMove */state[/* lastMouseMove */4],
                    /* lastScreenSize */state[/* lastScreenSize */5]
                  ];
        case 2 : 
            return /* record */[
                    /* shouldUpdate */true,
                    /* lastKeyName */state[/* lastKeyName */1],
                    /* lastKeyCode */state[/* lastKeyCode */2],
                    /* lastMouseClick */state[/* lastMouseClick */3],
                    /* lastMouseMove *//* tuple */[
                      data[0],
                      data[1]
                    ],
                    /* lastScreenSize */state[/* lastScreenSize */5]
                  ];
        case 3 : 
            return /* record */[
                    /* shouldUpdate */true,
                    /* lastKeyName */state[/* lastKeyName */1],
                    /* lastKeyCode */state[/* lastKeyCode */2],
                    /* lastMouseClick */state[/* lastMouseClick */3],
                    /* lastMouseMove */state[/* lastMouseMove */4],
                    /* lastScreenSize *//* tuple */[
                      data[0],
                      data[1]
                    ]
                  ];
        
      }
    }
  } else {
    return state;
  }
}

function render(state) {
  var color = /* RGBA */Block.__(2, [
      255,
      255,
      255,
      0.8
    ]);
  var font = "20px Helvetica";
  var ops_000 = /* DrawText */Block.__(2, [
      "Key Name: " + (String(state[/* lastKeyName */1]) + ""),
      font,
      /* Point2D */[
        10,
        20
      ],
      color
    ]);
  var ops_001 = /* :: */[
    /* DrawText */Block.__(2, [
        "Key Code: " + (String(state[/* lastKeyCode */2]) + ""),
        font,
        /* Point2D */[
          10,
          40
        ],
        color
      ]),
    /* :: */[
      /* DrawText */Block.__(2, [
          "Click: " + (String(state[/* lastMouseClick */3]) + ""),
          font,
          /* Point2D */[
            10,
            60
          ],
          color
        ]),
      /* :: */[
        /* DrawText */Block.__(2, [
            "Move: " + (String(state[/* lastMouseMove */4]) + ""),
            font,
            /* Point2D */[
              10,
              80
            ],
            color
          ]),
        /* :: */[
          /* DrawText */Block.__(2, [
              "Screen: " + (String(state[/* lastScreenSize */5]) + ""),
              font,
              /* Point2D */[
                10,
                100
              ],
              color
            ]),
          /* [] */0
        ]
      ]
    ]
  ];
  var ops = /* :: */[
    ops_000,
    ops_001
  ];
  Option.$great$great$pipe(ReActor.whereIs(Game_Renderer.name), (function (pid) {
          return ReActor.$less$neg(pid, [
                      Game_Renderer.Pipeline,
                      ops
                    ]);
        }));
  return /* () */0;
}

function loop(env, state) {
  var state$prime = Option.$less$pipe$great(Option.$great$great$pipe(Curry._1(env[/* recv */1], /* () */0), (function (param) {
              return handleMessage(state, param);
            })), state);
  var match = state$prime[/* shouldUpdate */0];
  if (match) {
    render(state$prime);
  }
  return /* Become */Block.__(0, [/* record */[
              /* shouldUpdate */false,
              /* lastKeyName */state$prime[/* lastKeyName */1],
              /* lastKeyCode */state$prime[/* lastKeyCode */2],
              /* lastMouseClick */state$prime[/* lastMouseClick */3],
              /* lastMouseMove */state$prime[/* lastMouseMove */4],
              /* lastScreenSize */state$prime[/* lastScreenSize */5]
            ]]);
}

function report(e) {
  Option.$great$great$pipe(ReActor.whereIs(debugInfo), (function (p) {
          return ReActor.$less$neg(p, [
                      Status,
                      e
                    ]);
        }));
  return /* () */0;
}

function start() {
  return ReActor.register(debugInfo, ReActor.spawn(loop, /* record */[
                  /* shouldUpdate */true,
                  /* lastKeyName */undefined,
                  /* lastKeyCode */undefined,
                  /* lastMouseClick */undefined,
                  /* lastMouseMove */undefined,
                  /* lastScreenSize */undefined
                ]));
}

export {
  debugInfo ,
  Status ,
  handleMessage ,
  render ,
  loop ,
  report ,
  start ,
  
}
/* ReActor Not a pure module */
