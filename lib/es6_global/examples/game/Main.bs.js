// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Block from "../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Option from "./Option.bs.js";
import * as ReActor from "../../src/ReActor.bs.js";
import * as Game_FFI from "./Game_FFI.bs.js";
import * as EventHandler from "./EventHandler.bs.js";
import * as Game_Renderer from "./Game_Renderer.bs.js";
import * as Game_DebugInfo from "./Game_DebugInfo.bs.js";

function repaint(surface, color) {
  Option.$great$great$pipe(ReActor.where_is(Game_Renderer.name), (function (pid) {
          return ReActor.send(pid, [
                      Game_Renderer.Pipeline,
                      /* :: */[
                        /* DrawRect */Block.__(2, [
                            surface,
                            color
                          ]),
                        /* [] */0
                      ]
                    ]);
        }));
  return /* () */0;
}

var events = /* :: */[
  /* Click */3,
  /* :: */[
    /* MouseMove */4,
    /* :: */[
      /* KeyDown */1,
      /* :: */[
        /* Resize */2,
        /* [] */0
      ]
    ]
  ]
];

function registerEvents(self) {
  Option.$great$great$pipe(ReActor.where_is(EventHandler.name), (function (pid) {
          return List.iter((function (param) {
                        return ReActor.send(pid, param);
                      }), List.map((function (e) {
                            return [
                                    EventHandler.Subscribe,
                                    e,
                                    self
                                  ];
                          }), events));
        }));
  return /* () */0;
}

function setup(env, state) {
  repaint(state[/* surface */2], state[/* color */1]);
  registerEvents(Curry._1(env[/* self */0], /* () */0));
  return /* Become */Block.__(0, [/* record */[
              /* started */true,
              /* color */state[/* color */1],
              /* surface */state[/* surface */2]
            ]]);
}

function handleEvent(state, e) {
  if (typeof e === "number") {
    return /* Become */Block.__(0, [state]);
  } else {
    switch (e.tag | 0) {
      case 0 : 
          Game_DebugInfo.report(e);
          console.log("key down", e[0], e[1]);
          return /* Become */Block.__(0, [state]);
      case 1 : 
          Game_DebugInfo.report(e);
          console.log("click at", e[0], e[1]);
          return /* Become */Block.__(0, [state]);
      case 2 : 
          Game_DebugInfo.report(e);
          console.log("mouse move at", e[0], e[1]);
          return /* Become */Block.__(0, [state]);
      case 3 : 
          Game_DebugInfo.report(e);
          var state$prime_000 = /* started */state[/* started */0];
          var state$prime_001 = /* color */state[/* color */1];
          var state$prime_002 = /* surface : Rect */[
            0,
            0,
            e[0],
            e[1]
          ];
          var state$prime = /* record */[
            state$prime_000,
            state$prime_001,
            state$prime_002
          ];
          repaint(state$prime_002, state$prime_001);
          return /* Become */Block.__(0, [state$prime]);
      
    }
  }
}

function handleMessage(state, param) {
  if (param[0] === EventHandler.Event) {
    return handleEvent(state, param[1]);
  } else {
    return /* Become */Block.__(0, [state]);
  }
}

function loop(env, state) {
  if (state[/* started */0]) {
    return Option.$less$pipe$great(Option.$great$great$pipe(Curry._1(env[/* recv */1], /* () */0), (function (param) {
                      return handleMessage(state, param);
                    })), /* Become */Block.__(0, [state]));
  } else {
    return setup(env, state);
  }
}

function start() {
  return ReActor.spawn(loop, /* record */[
              /* started */false,
              /* color : Hex */Block.__(0, [3556687]),
              /* surface : Rect */[
                0,
                0,
                Game_FFI.Viewport[/* width */0](/* () */0),
                Game_FFI.Viewport[/* height */1](/* () */0)
              ]
            ]);
}

var Scene = /* module */[
  /* repaint */repaint,
  /* events */events,
  /* registerEvents */registerEvents,
  /* setup */setup,
  /* handleEvent */handleEvent,
  /* handleMessage */handleMessage,
  /* loop */loop,
  /* start */start
];

function start$1() {
  Game_DebugInfo.start(/* () */0);
  EventHandler.start(/* () */0);
  Game_Renderer.start(/* () */0);
  start(/* () */0);
  return /* () */0;
}

var Game = /* module */[/* start */start$1];

ReActor.trace(/* record */[
      /* matcher */(function (_, _$1) {
          return true;
        }),
      /* handler */(function (prim) {
          console.log(prim);
          return /* () */0;
        }),
      /* timeout */705032704
    ]);

start$1(/* () */0);

export {
  Scene ,
  Game ,
  
}
/*  Not a pure module */
