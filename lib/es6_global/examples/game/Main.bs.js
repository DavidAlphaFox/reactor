// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as Block from "../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Option from "./Option.bs.js";
import * as ReActor from "../../src/ReActor.bs.js";
import * as Game_FFI from "./Game_FFI.bs.js";
import * as Caml_exceptions from "../../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";
import * as Game_InputHandler from "./Game_InputHandler.bs.js";

var Paint = Caml_exceptions.create("Main.Renderer.Paint");

function handleMessage(state, message) {
  if (message[0] === Paint) {
    Game_FFI.Canvas[/* fillRect */2](state[/* canvas */1], message[1], message[2]);
    return /* Become */Block.__(0, [state]);
  } else {
    return /* Become */Block.__(0, [state]);
  }
}

function loop(env, state) {
  return Option.$less$pipe$great(Option.$great$great$pipe(Curry._1(env[/* recv */1], /* () */0), (function (param) {
                    return handleMessage(state, param);
                  })), /* Become */Block.__(0, [state]));
}

function start() {
  var initialState_001 = /* canvas */Game_FFI.Canvas[/* get2dContext */0](Game_FFI.DOM[/* elementById */0]("game"));
  var initialState = /* record */[
    /* fpsCap */30,
    initialState_001
  ];
  return ReActor.register("renderer", ReActor.spawn(loop, initialState));
}

var Renderer = /* module */[
  /* Paint */Paint,
  /* handleMessage */handleMessage,
  /* loop */loop,
  /* start */start
];

function setup(_, state) {
  var match = state[/* started */0];
  if (match) {
    return /* Become */Block.__(0, [state]);
  } else {
    var match$1 = ReActor.where_is("renderer");
    if (match$1 !== undefined) {
      ReActor.send(match$1, [
            Paint,
            state[/* surface */2],
            state[/* color */1]
          ]);
      return /* Become */Block.__(0, [/* record */[
                  /* started */true,
                  /* color */state[/* color */1],
                  /* surface */state[/* surface */2]
                ]]);
    } else {
      return /* Terminate */0;
    }
  }
}

function start$1() {
  return ReActor.spawn(setup, /* record */[
              /* started */false,
              /* color : Hex */Block.__(0, [3556687]),
              /* surface : Rect */[
                0,
                0,
                500,
                500
              ]
            ]);
}

var Scene = /* module */[
  /* setup */setup,
  /* start */start$1
];

function start$2() {
  Game_InputHandler.start("screen");
  start(/* () */0);
  start$1(/* () */0);
  return /* () */0;
}

var Game = /* module */[/* start */start$2];

ReActor.trace(/* record */[
      /* matcher */(function (_, _$1) {
          return true;
        }),
      /* handler */(function (prim) {
          console.log(prim);
          return /* () */0;
        }),
      /* timeout */705032704
    ]);

start$2(/* () */0);

export {
  Renderer ,
  Scene ,
  Game ,
  
}
/*  Not a pure module */
