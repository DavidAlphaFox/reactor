// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as $$Array from "../../../../node_modules/bs-platform/lib/es6/array.js";
import * as Block from "../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as ReActor from "../../src/ReActor.bs.js";
import * as Caml_array from "../../../../node_modules/bs-platform/lib/es6/caml_array.js";
import * as ReActor_Process from "../../src/ReActor_Process.bs.js";

function counter(_, state) {
  return /* Become */Block.__(0, [/* record */[/* n */state[/* n */0] + 1 | 0]]);
}

function printing_counter(number, env, state) {
  if (state[/* n */0] === number) {
    var pid = ReActor_Process.Pid[/* toString */1](Curry._1(env[/* self */0], /* () */0));
    console.log("" + (String(pid) + (" :: Reached number " + (String(number) + ""))));
  }
  return /* Become */Block.__(0, [/* record */[/* n */state[/* n */0] + 1 | 0]]);
}

$$Array.to_list($$Array.map((function (i) {
            return ReActor.spawn(counter, /* record */[/* n */i]);
          }), Caml_array.caml_make_vect(3, 0)));

var counter_pids = $$Array.to_list($$Array.map((function (i) {
            return ReActor.spawn((function (param, param$1) {
                          return printing_counter(2112, param, param$1);
                        }), /* record */[/* n */i]);
          }), Caml_array.caml_make_vect(3, 0)));

export {
  counter ,
  printing_counter ,
  counter_pids ,
  
}
/*  Not a pure module */
