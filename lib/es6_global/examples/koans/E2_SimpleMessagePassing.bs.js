// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as Block from "../../../../node_modules/bs-platform/lib/es6/block.js";
import * as Curry from "../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as ReActor from "../../src/ReActor.bs.js";
import * as Js_primitive from "../../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as ReActor_Utils from "../../src/ReActor_Utils.bs.js";
import * as Caml_exceptions from "../../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";
import * as ReActor_Runtime from "../../src/ReActor_Runtime.bs.js";

var Log = Caml_exceptions.create("E2_SimpleMessagePassing.Log");

function logger_f(env, prefix) {
  var match = Curry._1(env[/* recv */1], /* () */0);
  if (match !== undefined) {
    var m = Js_primitive.valFromOption(match);
    var now = ReActor_Utils.$$Date[/* now */0](/* () */0);
    if (m[0] === Log) {
      console.log("" + (String(prefix) + (" - " + (String(now) + (" - " + (String(m[1]) + ""))))));
    }
    
  }
  return /* Become */Block.__(0, [prefix]);
}

var logger = ReActor.register("logger", ReActor.spawn(logger_f, "Default =>"));

console.log("What!");

ReActor_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    1
                  ]);
      }), 0);

ReActor_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    2
                  ]);
      }), 500);

ReActor_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    3
                  ]);
      }), 1000);

ReActor_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    4
                  ]);
      }), 3000);

export {
  Log ,
  logger_f ,
  logger ,
  
}
/* logger Not a pure module */
