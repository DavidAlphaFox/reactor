// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as FFI_Runtime$Reactor from "./FFI_Runtime.bs.js";
import * as ReActor_Scheduler$Reactor from "./ReActor_Scheduler.bs.js";

function handleMessage(message) {
  var match = message[0];
  console.log("Scheduler(" + (String(match[/* id */0]) + (") [ {proc_count," + (String(match[/* proc_count */1]) + "} ]"))));
  return /* () */0;
}

function ping(workers) {
  return List.iter((function (param) {
                return ReActor_Scheduler$Reactor.send(/* Info */0, param);
              }), workers);
}

function make() {
  return /* :: */[
          /* record */[/* contents */ReActor_Scheduler$Reactor.make(/* () */0)],
          /* [] */0
        ];
}

var Schedulers = /* module */[
  /* handleMessage */handleMessage,
  /* ping */ping,
  /* make */make
];

function run(s) {
  FFI_Runtime$Reactor.defer((function () {
          List.iter((function (param) {
                  return ReActor_Scheduler$Reactor.send(/* Info */0, param);
                }), s[/* workers */2]);
          return run(s);
        }), s[/* checkupFreq */3]);
  return /* record */[
          /* tasks */s[/* tasks */0],
          /* maxConcurrency */s[/* maxConcurrency */1],
          /* workers */s[/* workers */2],
          /* checkupFreq */s[/* checkupFreq */3]
        ];
}

function make$1(checkupFreq, maxConcurrency) {
  return /* record */[
          /* tasks : [] */0,
          /* maxConcurrency */maxConcurrency,
          /* workers */make(maxConcurrency),
          /* checkupFreq */checkupFreq
        ];
}

function spawn(param, _) {
  var w = ReActor_Scheduler$Reactor.leastBusy(param[/* workers */2]);
  var w$prime_000 = /* id */w[0][/* id */0];
  var w$prime_001 = /* proc_count */w[0][/* proc_count */1] + 1 | 0;
  var w$prime = /* record */[
    w$prime_000,
    w$prime_001
  ];
  var pid_001 = w$prime_001;
  var pid = /* tuple */[
    0,
    pid_001,
    0
  ];
  w[0] = w$prime;
  ReActor_Scheduler$Reactor.send(/* Spawn */1, w);
  return pid;
}

export {
  Schedulers ,
  run ,
  make$1 as make,
  spawn ,
  
}
/* No side effect */
