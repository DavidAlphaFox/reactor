// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_obj from "../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as FFI_Runtime from "./FFI_Runtime.bs.js";
import * as Js_primitive from "../../../node_modules/bs-platform/lib/es6/js_primitive.js";

var Message = /* module */[];

function make(node_name, scheduler_id, process_number) {
  return /* tuple */[
          node_name,
          scheduler_id,
          process_number
        ];
}

function toString(param) {
  return "<" + (String(param[0]) + ("." + (String(param[1]) + ("." + (String(param[2]) + ">")))));
}

var Pid = /* module */[
  /* make */make,
  /* toString */toString
];

function toString$1(param) {
  if (param) {
    return "dead";
  } else {
    return "alive";
  }
}

var Status = /* module */[/* toString */toString$1];

function markAsDead(p) {
  p[/* status */1][0] = /* Dead */1;
  return /* () */0;
}

function keepAlive(p) {
  p[/* status */1][0] = /* Alive */0;
  return /* () */0;
}

function send(msg, $$process) {
  $$process[/* mailbox */2][0] = List.append($$process[/* mailbox */2][0], /* :: */[
        msg,
        /* [] */0
      ]);
  return /* () */0;
}

function recv($$process, _) {
  var match = $$process[/* mailbox */2][0];
  if (match) {
    $$process[/* mailbox */2][0] = match[1];
    return Js_primitive.some(match[0]);
  }
  
}

function make$1(pid, f, initial_args) {
  var process_001 = /* status : record */[/* contents : Alive */0];
  var process_002 = /* mailbox : record */[/* contents : [] */0];
  var $$process = /* record */[
    /* pid */pid,
    process_001,
    process_002
  ];
  var env = [];
  var run = function (args) {
    var match = Curry._2(f, env, args);
    if (typeof match === "number") {
      process_001[0] = /* Dead */1;
      return /* () */0;
    } else if (match.tag) {
      var newState = match[1];
      return FFI_Runtime.defer((function () {
                    return run(newState);
                  }), match[0]);
    } else {
      var newState$1 = match[0];
      return FFI_Runtime.nextTick((function () {
                    return run(newState$1);
                  }));
    }
  };
  Caml_obj.caml_update_dummy(env, /* record */[
        /* self */(function () {
            return pid;
          }),
        /* recv */(function (param) {
            return recv($$process, param);
          })
      ]);
  run(initial_args);
  return $$process;
}

export {
  Message ,
  Pid ,
  Status ,
  markAsDead ,
  keepAlive ,
  send ,
  recv ,
  make$1 as make,
  
}
/* FFI_Runtime Not a pure module */
