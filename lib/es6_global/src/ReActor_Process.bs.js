// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_obj from "../../../node_modules/bs-platform/lib/es6/caml_obj.js";
import * as FFI_Runtime$Reactor from "./FFI_Runtime.bs.js";

var Message = /* module */[];

function make(node_name, scheduler_id, process_number) {
  return /* tuple */[
          node_name,
          scheduler_id,
          process_number
        ];
}

function toString(param) {
  return "<" + (String(param[0]) + ("." + (String(param[1]) + ("." + (String(param[2]) + ">")))));
}

var Pid = /* module */[
  /* make */make,
  /* toString */toString
];

function toString$1(param) {
  if (param) {
    return "dead";
  } else {
    return "alive";
  }
}

var Status = /* module */[/* toString */toString$1];

function markAsDead(p) {
  p[/* status */1][0] = /* Dead */1;
  return /* () */0;
}

function keepAlive(p) {
  p[/* status */1][0] = /* Alive */0;
  return /* () */0;
}

function send(msg, $$process) {
  $$process[/* mailbox */2][0] = List.append($$process[/* mailbox */2][0], /* :: */[
        msg,
        /* [] */0
      ]);
  return /* () */0;
}

function recv($$process, f) {
  return FFI_Runtime$Reactor.nextTick((function () {
                var match = $$process[/* mailbox */2][0];
                if (match) {
                  Curry._1(f, match[0]);
                  $$process[/* mailbox */2][0] = match[1];
                  return /* () */0;
                } else {
                  return recv($$process, f);
                }
              }));
}

function make$1(pid, f, initial_args) {
  var process_001 = /* status : record */[/* contents : Alive */0];
  var process_002 = /* mailbox : record */[/* contents : [] */0];
  var $$process = /* record */[
    /* pid */pid,
    process_001,
    process_002
  ];
  var env = [];
  var run = function (args) {
    var match = process_001[0];
    if (match) {
      return /* () */0;
    } else {
      Curry._2(f, env, args);
      return /* () */0;
    }
  };
  Caml_obj.caml_update_dummy(env, /* record */[
        /* loop */(function (args) {
            FFI_Runtime$Reactor.nextTick((function () {
                    return run(args);
                  }));
            return args;
          }),
        /* self */(function () {
            return pid;
          }),
        /* sleep */(function (ms, g) {
            return FFI_Runtime$Reactor.defer((function () {
                          return Curry._1(g, /* () */0);
                        }), ms);
          }),
        /* recv */(function (param) {
            return recv($$process, param);
          })
      ]);
  run(initial_args);
  return $$process;
}

export {
  Message ,
  Pid ,
  Status ,
  markAsDead ,
  keepAlive ,
  send ,
  recv ,
  make$1 as make,
  
}
/* No side effect */
