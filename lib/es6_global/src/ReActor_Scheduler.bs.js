// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as Window$Reactor from "./FFI/Window.bs.js";
import * as Worker$Reactor from "./FFI/Worker.bs.js";
import * as Runtime$Reactor from "./FFI/Runtime.bs.js";

function handleWorkerMessage(message) {
  var match = message.data;
  var match$1 = match[0];
  console.log("Worker(" + (String(match$1[/* id */0]) + (") [ {proc_count," + (String(match$1[/* proc_count */1]) + "} ]"))));
  return /* () */0;
}

function ping(workers) {
  return List.iter((function (param) {
                return Worker$Reactor.postMessage(/* Info */0, param);
              }), List.map((function (param) {
                    return param[/* worker */1];
                  }), workers));
}

function make(count, workerSrc) {
  var _n = count;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var n = _n;
    if (n !== 0) {
      var worker = Worker$Reactor.onMessage(handleWorkerMessage, Worker$Reactor.make(workerSrc, /* ModuleWorker */0));
      _acc = /* :: */[
        /* record */[
          /* id */n,
          /* worker */worker
        ],
        acc
      ];
      _n = n - 1 | 0;
      continue ;
    } else {
      return acc;
    }
  };
}

function loop(scheduler) {
  Runtime$Reactor.defer((function () {
          ping(scheduler[/* workers */2]);
          return loop(scheduler);
        }), scheduler[/* checkupFreq */3]);
  return /* () */0;
}

function make$1(checkupFreq) {
  var workerCount = Window$Reactor.hardwareConcurrency - 1 | 0;
  return /* record */[
          /* tasks : [] */0,
          /* maxConcurrency */workerCount,
          /* workers */make(workerCount, "/lib/es6_global/src/ReActor_Worker.bs.js"),
          /* checkupFreq */checkupFreq
        ];
}

export {
  make$1 as make,
  loop ,
  
}
/* Window-Reactor Not a pure module */
