// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as $$Array from "../../../node_modules/bs-platform/lib/es6/array.js";
import * as $$String from "../../../node_modules/bs-platform/lib/es6/string.js";

function now() {
  return Date.now();
}

var $$Date$1 = /* module */[/* now */now];

var __monotonic_counter = /* record */[/* contents */0];

function next() {
  var last = __monotonic_counter[0];
  __monotonic_counter[0] = __monotonic_counter[0] + 1 | 0;
  return last;
}

var Monotonic = /* module */[
  /* __monotonic_counter */__monotonic_counter,
  /* next */next
];

function make(prim) {
  return new Uint16Array(prim);
}

function to_array(prim) {
  return Array.from(prim);
}

var UInt16Array = /* module */[
  /* make */make,
  /* to_array */to_array
];

function to_string(radix, value) {
  return value.toString(radix);
}

var $$Number = /* module */[/* to_string */to_string];

function inRange(min, max) {
  return min + (Math.random() * max | 0) | 0;
}

function random(n) {
  var buffer = new Uint16Array(n);
  self.crypto.getRandomValues(buffer);
  return buffer;
}

function asHex(buff, length) {
  var x = $$Array.fold_left((function (a, b) {
          return "" + (String(a) + ("" + (String(b) + "")));
        }), "", $$Array.map((function (param) {
              return param.toString(16);
            }), Array.from(buff)));
  return $$String.sub(x, 0, length);
}

var Random = /* module */[
  /* inRange */inRange,
  /* random */random,
  /* asHex */asHex
];

export {
  $$Date$1 as $$Date,
  Monotonic ,
  UInt16Array ,
  $$Number ,
  Random ,
  
}
/* No side effect */
