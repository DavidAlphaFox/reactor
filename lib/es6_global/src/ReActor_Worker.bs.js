// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as List from "../../../node_modules/bs-platform/lib/es6/list.js";
import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Worker$Reactor from "./FFI/Worker.bs.js";
import * as Runtime$Reactor from "./FFI/Runtime.bs.js";
import * as ReActor_Utils$Reactor from "./ReActor_Utils.bs.js";

var id = ReActor_Utils$Reactor.Random[/* asHex */2](ReActor_Utils$Reactor.Random[/* random */1](7), 7);

var $$this = /* record */[/* contents : record */[
    /* id */id,
    /* proc_count */0,
    /* processes : [] */0
  ]];

function handle_info() {
  return Worker$Reactor.postMessage(/* WorkerStatus */[$$this[0]], self);
}

function handle_spawn() {
  console.log("Spawning");
  return /* () */0;
}

function onMessage(message) {
  var match = message.data;
  if (match) {
    console.log("Spawning");
    return /* () */0;
  } else {
    return handle_info(/* () */0);
  }
}

var Handlers = /* module */[
  /* handle_info */handle_info,
  /* handle_spawn */handle_spawn,
  /* onMessage */onMessage
];

function loop(worker) {
  return Runtime$Reactor.defer((function () {
                List.iter((function (p) {
                        return Curry._1(p[/* f */1], /* () */0);
                      }), worker[/* processes */2]);
                return loop(worker);
              }), 4);
}

loop($$this[0]);

Worker$Reactor.onMessage(onMessage, self);

export {
  id ,
  $$this ,
  Handlers ,
  loop ,
  
}
/* id Not a pure module */
