// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE

import * as Curry from "../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_exceptions from "../../../node_modules/bs-platform/lib/es6/caml_exceptions.js";
import * as ReActor$Reactor from "./ReActor.bs.js";
import * as ReActor_Utils$Reactor from "./ReActor_Utils.bs.js";

var __name = "logger";

var Log = Caml_exceptions.create("TestModule_3-Reactor.Logger.Log");

function logger_f(env, prefix) {
  Curry._1(env[/* recv */3], (function (m) {
          var now = ReActor_Utils$Reactor.Performance[/* now */0](/* () */0);
          if (m[0] === Log) {
            var n = m[1];
            var diff = now - n | 0;
            console.log("" + (String(prefix) + (" - " + (String(n) + (" (took " + (String(diff) + " ms)"))))));
          }
          return Curry._1(env[/* loop */0], prefix);
        }));
  return prefix;
}

var logger = ReActor$Reactor.register(__name, ReActor$Reactor.spawn(logger_f, "Default =>"));

var Logger = /* module */[
  /* __name */__name,
  /* Log */Log,
  /* logger_f */logger_f,
  /* logger */logger
];

function clock_f(env, state) {
  Curry._2(env[/* sleep */2], state[/* delay */0], (function () {
          ReActor$Reactor.send(state[/* send_to */1], [
                Log,
                ReActor_Utils$Reactor.Performance[/* now */0](/* () */0)
              ]);
          return Curry._1(env[/* loop */0], state);
        }));
  return state;
}

function start(param) {
  return ReActor$Reactor.spawn(clock_f, param);
}

var Clock = /* module */[
  /* clock_f */clock_f,
  /* start */start
];

var match = ReActor$Reactor.where_is("logger");

if (match !== undefined) {
  ReActor$Reactor.spawn(clock_f, /* record */[
        /* delay */0,
        /* send_to */match
      ]);
} else {
  console.log("Failed to start logger.");
}

export {
  Logger ,
  Clock ,
  
}
/* logger Not a pure module */
