// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var ReActor = require("../src/ReActor.bs.js");
var FFI_Runtime = require("../src/FFI_Runtime.bs.js");
var ReActor_Utils = require("../src/ReActor_Utils.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var Log = Caml_exceptions.create("E2_SimpleMessagePassing.Log");

function logger_f(env, prefix) {
  Curry._1(env[/* recv */3], (function (m) {
          var now = ReActor_Utils.$$Date[/* now */0](/* () */0);
          if (m[0] === Log) {
            console.log("" + (String(prefix) + (" - " + (String(now) + (" - " + (String(m[1]) + ""))))));
          }
          return Curry._1(env[/* loop */0], prefix);
        }));
  return prefix;
}

var logger = ReActor.register("logger", ReActor.spawn(logger_f, "Default =>"));

console.log("What!");

FFI_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    1
                  ]);
      }), 0);

FFI_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    2
                  ]);
      }), 500);

FFI_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    3
                  ]);
      }), 1000);

FFI_Runtime.defer((function () {
        return ReActor.send(logger, [
                    Log,
                    4
                  ]);
      }), 3000);

exports.Log = Log;
exports.logger_f = logger_f;
exports.logger = logger;
/* logger Not a pure module */
