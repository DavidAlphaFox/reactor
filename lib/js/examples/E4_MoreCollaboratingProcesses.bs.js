// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReActor = require("../src/ReActor.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReActor_Utils = require("../src/ReActor_Utils.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var __name = "logger";

var Log = Caml_exceptions.create("E4_MoreCollaboratingProcesses.Logger.Log");

function logger_f(env, prefix) {
  Curry._1(env[/* recv */3], (function (param) {
          if (param[0] === Log) {
            console.log("" + (String(prefix) + ("" + (String(param[1]) + ""))));
            return Curry._1(env[/* loop */0], prefix);
          } else {
            return Curry._1(env[/* loop */0], prefix);
          }
        }));
  return prefix;
}

var logger = ReActor.register(__name, ReActor.spawn(logger_f, "Default => "));

var Logger = /* module */[
  /* __name */__name,
  /* Log */Log,
  /* logger_f */logger_f,
  /* logger */logger
];

var Diff = Caml_exceptions.create("E4_MoreCollaboratingProcesses.Differ.Diff");

function f(env, config) {
  Curry._1(env[/* recv */3], (function (param) {
          if (param[0] === Diff) {
            var delta = ReActor_Utils.Performance[/* now */0](/* () */0) - param[1] | 0;
            ReActor.send(config[/* send_to */0], Curry._1(config[/* wrap */1], delta));
            return Curry._1(env[/* loop */0], config);
          } else {
            return Curry._1(env[/* loop */0], config);
          }
        }));
  return config;
}

function start(param) {
  return ReActor.spawn(f, param);
}

var Differ = /* module */[
  /* Diff */Diff,
  /* f */f,
  /* start */start
];

function clock_f(env, config) {
  Curry._2(env[/* sleep */2], config[/* delay */0], (function () {
          ReActor.send(config[/* send_to */1], Curry._1(config[/* wrap */2], ReActor_Utils.Performance[/* now */0](/* () */0)));
          return Curry._1(env[/* loop */0], config);
        }));
  return config;
}

function start$1(param) {
  return ReActor.spawn(clock_f, param);
}

var Clock = /* module */[
  /* clock_f */clock_f,
  /* start */start$1
];

var match = ReActor.where_is("logger");

if (match !== undefined) {
  var pid = match;
  $$Array.iter((function () {
          var differ = ReActor.spawn(f, /* record */[
                /* send_to */pid,
                /* wrap */(function (x) {
                    return [
                            Log,
                            x
                          ];
                  })
              ]);
          ReActor.spawn(clock_f, /* record */[
                /* delay */100,
                /* send_to */differ,
                /* wrap */(function (x) {
                    return [
                            Diff,
                            x
                          ];
                  })
              ]);
          return /* () */0;
        }), Caml_array.caml_make_vect(10, 0));
} else {
  console.log("Failed to start logger.");
}

exports.Logger = Logger;
exports.Differ = Differ;
exports.Clock = Clock;
/* logger Not a pure module */
