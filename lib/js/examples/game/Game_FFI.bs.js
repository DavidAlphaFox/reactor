// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");

function width(param) {
  return window.visualViewport.width;
}

function height(param) {
  return window.visualViewport.height;
}

var Viewport = /* module */[
  /* width */width,
  /* height */height
];

function preventDefault(prim) {
  prim.preventDefault();
  return /* () */0;
}

function toString(param) {
  switch (param) {
    case 0 : 
        return "unknown";
    case 1 : 
        return "keydown";
    case 2 : 
        return "resize";
    case 3 : 
        return "click";
    case 4 : 
        return "mousemove";
    
  }
}

function fromString(param) {
  switch (param) {
    case "click" : 
        return /* Click */3;
    case "keydown" : 
        return /* KeyDown */1;
    case "mousemove" : 
        return /* MouseMove */4;
    case "resize" : 
        return /* Resize */2;
    default:
      return /* Unknown */0;
  }
}

function compare(a, b) {
  return $$String.compare(toString(a), toString(b));
}

var $$Map$1 = $$Map.Make(/* module */[/* compare */compare]);

function kind(e) {
  return fromString(e.type);
}

function data($$event) {
  var match = fromString($$event.type);
  switch (match) {
    case 0 : 
        return /* NoData */0;
    case 1 : 
        return /* KeyDownData */Block.__(0, [
                  $$event.key,
                  $$event.keyCode
                ]);
    case 2 : 
        return /* ResizeData */Block.__(3, [
                  window.visualViewport.width,
                  window.visualViewport.height
                ]);
    case 3 : 
        return /* ClickData */Block.__(1, [
                  $$event.pageX,
                  $$event.pageY
                ]);
    case 4 : 
        return /* MouseMoveData */Block.__(2, [
                  $$event.pageX,
                  $$event.pageY
                ]);
    
  }
}

var Event = /* module */[
  /* preventDefault */preventDefault,
  /* toString */toString,
  /* fromString */fromString,
  /* Map */$$Map$1,
  /* kind */kind,
  /* data */data
];

var $$document = document;

var $$window$1 = window;

function createElement(prim) {
  return document.createElement(prim);
}

function elementById(prim) {
  return document.getElementById(prim);
}

function on($$event, handler, node) {
  node.addEventListener(toString($$event), handler);
  return node;
}

function off($$event, handler, node) {
  node.removeEventListener(toString($$event), handler);
  return node;
}

function size(node) {
  return /* tuple */[
          node.width,
          node.height
        ];
}

var DOM = /* module */[
  /* document */$$document,
  /* window */$$window$1,
  /* createElement */createElement,
  /* elementById */elementById,
  /* on */on,
  /* off */off,
  /* size */size
];

function create(w, h) {
  var canvas = document.createElement("canvas");
  canvas.width = w;
  canvas.height = h;
  return canvas;
}

function get2dContext(node) {
  return node.getContext("2d");
}

function colorToString(param) {
  switch (param.tag | 0) {
    case 0 : 
        var hex = Curry._1(Printf.sprintf(/* Format */[
                  /* Int */Block.__(4, [
                      /* Int_X */8,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* End_of_format */0
                    ]),
                  "%X"
                ]), param[0]);
        return "#" + (String(hex) + "");
    case 1 : 
        return "rgb(" + (String(param[0]) + (", " + (String(param[1]) + (", " + (String(param[2]) + ")")))));
    case 2 : 
        return "rgb(" + (String(param[0]) + (", " + (String(param[1]) + (", " + (String(param[2]) + (", " + (String(param[3]) + ")")))))));
    
  }
}

function fillStyle(canvas, color) {
  canvas.fillStyle = colorToString(color);
  return /* () */0;
}

function fillRect(canvas, param, color) {
  fillStyle(canvas, color);
  canvas.fillRect(param[0], param[1], param[2], param[3]);
  return canvas;
}

function fillText(canvas, text, font, param, color) {
  fillStyle(canvas, color);
  canvas.font = font;
  canvas.fillText(text, param[0], param[1]);
  return canvas;
}

function drawImage(canvas, context, param) {
  context.drawImage(canvas, param[0], param[1]);
  return /* () */0;
}

function beginPath(prim) {
  prim.beginPath();
  return /* () */0;
}

function fill(prim) {
  prim.fill();
  return /* () */0;
}

function arc(context, param, radius, beginAngle, endAngle, direction) {
  var direction$prime = direction ? true : false;
  context.arc(param[0], param[1], radius, beginAngle, endAngle, direction$prime);
  return /* () */0;
}

var Canvas = /* module */[
  /* create */create,
  /* get2dContext */get2dContext,
  /* colorToString */colorToString,
  /* fillStyle */fillStyle,
  /* fillRect */fillRect,
  /* fillText */fillText,
  /* drawImage */drawImage,
  /* beginPath */beginPath,
  /* fill */fill,
  /* arc */arc
];

exports.Viewport = Viewport;
exports.Event = Event;
exports.DOM = DOM;
exports.Canvas = Canvas;
/* Map Not a pure module */
