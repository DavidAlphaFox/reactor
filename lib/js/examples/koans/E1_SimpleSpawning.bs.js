// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReActor = require("../../src/ReActor.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReActor_Process = require("../../src/ReActor_Process.bs.js");

function counter(_env, state) {
  return /* Become */Block.__(0, [/* record */[/* n */state[/* n */0] + 1 | 0]]);
}

function printing_counter(number, env, state) {
  if (state[/* n */0] === number) {
    var pid = ReActor_Process.Pid[/* toString */1](Curry._1(env[/* self */0], /* () */0));
    console.log("" + (String(pid) + (" :: Reached number " + (String(number) + ""))));
  }
  return /* Become */Block.__(0, [/* record */[/* n */state[/* n */0] + 1 | 0]]);
}

$$Array.to_list($$Array.map((function (i) {
            return ReActor.spawn(counter, /* record */[/* n */i]);
          }), Caml_array.caml_make_vect(3, 0)));

var counter_pids = $$Array.to_list($$Array.map((function (i) {
            return ReActor.spawn((function (param, param$1) {
                          return printing_counter(2112, param, param$1);
                        }), /* record */[/* n */i]);
          }), Caml_array.caml_make_vect(3, 0)));

exports.counter = counter;
exports.printing_counter = printing_counter;
exports.counter_pids = counter_pids;
/*  Not a pure module */
