// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var ReActor = require("../../src/ReActor.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReActor_Utils = require("../../src/ReActor_Utils.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var __name = "logger";

var Log = Caml_exceptions.create("E3_CollaboratingProcesses.Logger.Log");

function logger_f(env, prefix) {
  var match = Curry._1(env[/* recv */1], /* () */0);
  if (match !== undefined) {
    var m = Js_primitive.valFromOption(match);
    if (m[0] === Log) {
      var n = m[1];
      var diff = ReActor_Utils.Performance[/* now */0](/* () */0) - n | 0;
      console.log("" + (String(prefix) + (" - " + (String(n) + (" (took " + (String(diff) + " ms)"))))));
    }
    
  }
  return /* Become */Block.__(0, [prefix]);
}

var logger = ReActor.register(__name, ReActor.spawn(logger_f, "Default =>"));

var Logger = /* module */[
  /* __name */__name,
  /* Log */Log,
  /* logger_f */logger_f,
  /* logger */logger
];

function clock_f(_env, state) {
  ReActor.send(state[/* send_to */1], [
        Log,
        ReActor_Utils.Performance[/* now */0](/* () */0)
      ]);
  return /* Suspend */Block.__(2, [
            state[/* delay */0],
            state
          ]);
}

function start(param) {
  return ReActor.spawn(clock_f, param);
}

var Clock = /* module */[
  /* clock_f */clock_f,
  /* start */start
];

var match = ReActor.whereIs("logger");

if (match !== undefined) {
  ReActor.spawn(clock_f, /* record */[
        /* delay */0,
        /* send_to */match
      ]);
} else {
  console.log("Failed to start logger.");
}

exports.Logger = Logger;
exports.Clock = Clock;
/* logger Not a pure module */
